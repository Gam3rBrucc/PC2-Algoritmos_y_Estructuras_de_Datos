#pragma once
#include <iostream>
#include "SNodo.h"

using std::string;
using std::cout;
using std::cin;
using std::endl;

template <class Generico>
class CPila {
    Nodo<Generico>* primero;
    Nodo<Generico>* ultimo;
    size_t t, tope;

public:
    CPila() {
        primero = ultimo = nullptr;
        t = 0;
        tope = -1;
    }
    CPila(size_t n) {
        primero = ultimo = nullptr;
        t = 0;
        tope = n;
    }

    Generico peek() {
        if(t == 0) {
            cout << "\n\n~~Esta pila esta vacia\n";
            t == 0;
        }
        return ultimo->elemento;
    }
    void push(Generico e) {
        Nodo<Generico>* n = new Nodo<Generico>(e);
        if(t == tope) {
            cout << "\n\n~~Pila llena\n";
            return;
        }
        if(t == 0) primero = ultimo = n;
        else {
            ultimo->sig = n;
            n->ant = ultimo;
            ultimo = n;
        }
        ++t;
    }
    void pop() {
        // TODO fix this!
        if(t == 0) {
            cout << "\n\n~~La pila ya esta vacia\n";
            return;
        }
        Nodo<Generico>* n = ultimo;
        ultimo = n->ant;
        ultimo->sig = nullptr;
        delete n;
        --t;
    }
    bool vacio() {
        if(t == 0) return true;
        else return false;
    }
    bool lleno() {
        if(t == tope) return true;
        else return true;
    }
};
